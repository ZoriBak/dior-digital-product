{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nfunction QRScan() {\n  _s();\n  const videoRef = React.useRef(null);\n  const [message, setMessage] = React.useState('Click start to scan QR code');\n\n  // For a full QR scanner, you'd usually use a library like jsQR or html5-qrcode,\n  // but here, let's keep it simple with instructions as implementation without JSX\n  // is complex and this requirement is secondary.\n\n  const containerStyle = {\n    fontFamily: '\"Times New Roman\", serif',\n    color: '#000',\n    padding: '20px',\n    textAlign: 'center'\n  };\n  const videoStyle = {\n    width: '320px',\n    height: '240px',\n    border: '1px solid #d4af37',\n    marginBottom: '15px'\n  };\n  async function startScan() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment'\n          }\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          videoRef.current.setAttribute('playsinline', true); // for iOS\n          videoRef.current.play();\n          setMessage('Scanning... (Not fully implemented)');\n          // Implement QR scanning logic here using canvas & jsQR library if needed\n        }\n      } catch (err) {\n        setMessage('Error accessing camera: ' + err.message);\n      }\n    } else {\n      setMessage('Camera API not supported in this browser.');\n    }\n  }\n  return /*#__PURE__*/React.createElement('div', {\n    style: containerStyle\n  }, /*#__PURE__*/React.createElement('video', {\n    ref: videoRef,\n    style: videoStyle\n  }), /*#__PURE__*/React.createElement('div', null, message), /*#__PURE__*/React.createElement('button', {\n    onClick: startScan,\n    style: {\n      marginTop: '10px',\n      padding: '8px 16px',\n      backgroundColor: '#d4af37',\n      border: 'none',\n      cursor: 'pointer',\n      fontWeight: 'bold'\n    }\n  }, 'Start Scan'));\n}\n_s(QRScan, \"cL/bNk81XiHFf+Qjgx+Fp75LnTY=\");\n_c = QRScan;\nexport default QRScan;\nvar _c;\n$RefreshReg$(_c, \"QRScan\");","map":{"version":3,"names":["React","QRScan","_s","videoRef","useRef","message","setMessage","useState","containerStyle","fontFamily","color","padding","textAlign","videoStyle","width","height","border","marginBottom","startScan","navigator","mediaDevices","getUserMedia","stream","video","facingMode","current","srcObject","setAttribute","play","err","createElement","style","ref","onClick","marginTop","backgroundColor","cursor","fontWeight","_c","$RefreshReg$"],"sources":["/Users/zoribak/Desktop/dior-digital-product/src/pages/QRScan.js"],"sourcesContent":["import React from 'react';\n\nfunction QRScan() {\n  const videoRef = React.useRef(null);\n  const [message, setMessage] = React.useState('Click start to scan QR code');\n\n  // For a full QR scanner, you'd usually use a library like jsQR or html5-qrcode,\n  // but here, let's keep it simple with instructions as implementation without JSX\n  // is complex and this requirement is secondary.\n\n  const containerStyle = {\n    fontFamily: '\"Times New Roman\", serif',\n    color: '#000',\n    padding: '20px',\n    textAlign: 'center'\n  };\n\n  const videoStyle = {\n    width: '320px',\n    height: '240px',\n    border: '1px solid #d4af37',\n    marginBottom: '15px'\n  };\n\n  async function startScan() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({video: {facingMode: 'environment'}});\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          videoRef.current.setAttribute('playsinline', true); // for iOS\n          videoRef.current.play();\n          setMessage('Scanning... (Not fully implemented)');\n          // Implement QR scanning logic here using canvas & jsQR library if needed\n        }\n      } catch (err) {\n        setMessage('Error accessing camera: ' + err.message);\n      }\n    } else {\n      setMessage('Camera API not supported in this browser.');\n    }\n  }\n\n  return React.createElement('div', {style: containerStyle},\n    React.createElement('video', {ref: videoRef, style: videoStyle}),\n    React.createElement('div', null, message),\n    React.createElement('button', {onClick: startScan, style: {marginTop: '10px', padding: '8px 16px', backgroundColor: '#d4af37', border: 'none', cursor: 'pointer', fontWeight: 'bold'}}, 'Start Scan')\n  );\n}\n\nexport default QRScan;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,KAAK,CAACO,QAAQ,CAAC,6BAA6B,CAAC;;EAE3E;EACA;EACA;;EAEA,MAAMC,cAAc,GAAG;IACrBC,UAAU,EAAE,0BAA0B;IACtCC,KAAK,EAAE,MAAM;IACbC,OAAO,EAAE,MAAM;IACfC,SAAS,EAAE;EACb,CAAC;EAED,MAAMC,UAAU,GAAG;IACjBC,KAAK,EAAE,OAAO;IACdC,MAAM,EAAE,OAAO;IACfC,MAAM,EAAE,mBAAmB;IAC3BC,YAAY,EAAE;EAChB,CAAC;EAED,eAAeC,SAASA,CAAA,EAAG;IACzB,IAAIC,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACC,YAAY,EAAE;MACjE,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMH,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAACE,KAAK,EAAE;YAACC,UAAU,EAAE;UAAa;QAAC,CAAC,CAAC;QAC9F,IAAIrB,QAAQ,CAACsB,OAAO,EAAE;UACpBtB,QAAQ,CAACsB,OAAO,CAACC,SAAS,GAAGJ,MAAM;UACnCnB,QAAQ,CAACsB,OAAO,CAACE,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;UACpDxB,QAAQ,CAACsB,OAAO,CAACG,IAAI,CAAC,CAAC;UACvBtB,UAAU,CAAC,qCAAqC,CAAC;UACjD;QACF;MACF,CAAC,CAAC,OAAOuB,GAAG,EAAE;QACZvB,UAAU,CAAC,0BAA0B,GAAGuB,GAAG,CAACxB,OAAO,CAAC;MACtD;IACF,CAAC,MAAM;MACLC,UAAU,CAAC,2CAA2C,CAAC;IACzD;EACF;EAEA,oBAAON,KAAK,CAAC8B,aAAa,CAAC,KAAK,EAAE;IAACC,KAAK,EAAEvB;EAAc,CAAC,eACvDR,KAAK,CAAC8B,aAAa,CAAC,OAAO,EAAE;IAACE,GAAG,EAAE7B,QAAQ;IAAE4B,KAAK,EAAElB;EAAU,CAAC,CAAC,eAChEb,KAAK,CAAC8B,aAAa,CAAC,KAAK,EAAE,IAAI,EAAEzB,OAAO,CAAC,eACzCL,KAAK,CAAC8B,aAAa,CAAC,QAAQ,EAAE;IAACG,OAAO,EAAEf,SAAS;IAAEa,KAAK,EAAE;MAACG,SAAS,EAAE,MAAM;MAAEvB,OAAO,EAAE,UAAU;MAAEwB,eAAe,EAAE,SAAS;MAAEnB,MAAM,EAAE,MAAM;MAAEoB,MAAM,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAM;EAAC,CAAC,EAAE,YAAY,CACtM,CAAC;AACH;AAACnC,EAAA,CA9CQD,MAAM;AAAAqC,EAAA,GAANrC,MAAM;AAgDf,eAAeA,MAAM;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}